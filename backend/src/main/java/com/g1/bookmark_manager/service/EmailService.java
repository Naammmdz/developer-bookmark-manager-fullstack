package com.g1.bookmark_manager.service;

import com.g1.bookmark_manager.dto.request.CollectionRequest;
import com.g1.bookmark_manager.dto.response.CollectionResponse;
import com.g1.bookmark_manager.entity.Collection;
import com.g1.bookmark_manager.entity.User;
import com.g1.bookmark_manager.enums.AuditAction;
import com.g1.bookmark_manager.exception.ResourceNotFoundException;
import com.g1.bookmark_manager.repository.CollectionRepository;
import com.g1.bookmark_manager.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class EmailService {

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CollectionRepository collectionRepository;

    @Autowired
    private AuditLogService auditLogService;

    /**
     * G·ª≠i email v√† ghi l·∫°i log g·ª≠i email n·∫øu ng∆∞·ªùi d√πng t·ªìn t·∫°i.
     */
    public void sendSimpleEmail(String to, String subject, String body) {
        // G·ª≠i email
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject(subject);
        message.setText(body);
        mailSender.send(message);

        // Ghi log n·∫øu t√¨m ƒë∆∞·ª£c user theo email
        Optional<User> userOpt = userRepository.findByEmail(to);
        userOpt.ifPresent(user -> {
            auditLogService.log(user.getId(), AuditAction.SEND_EMAIL, "G·ª≠i email v·ªõi ti√™u ƒë·ªÅ: " + subject);
        });
    }

    /**
     * T·∫°o b·ªô s∆∞u t·∫≠p v√† g·ª≠i email th√¥ng b√°o.
     */
    public CollectionResponse createCollection(Long userId, CollectionRequest request) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + userId));

        Collection collection = new Collection();
        collection.setName(request.getName());
        collection.setIcon(request.getIcon());
        collection.setDescription(request.getDescription());
        collection.setIsPublic(request.getIsPublic());
        collection.setSortOrder(request.getSortOrder());
        collection.setUser(user);

        collectionRepository.save(collection);

        // ‚úÖ G·ª≠i email th√¥ng b√°o
        String subject = "üéâ B·ªô s∆∞u t·∫≠p m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o!";
        String body = "Ch√†o " + user.getUsername() + ",\n\n"
                + "B·∫°n v·ª´a t·∫°o b·ªô s∆∞u t·∫≠p m·ªõi: \"" + request.getName() + "\".\n"
                + "H√£y b·∫Øt ƒë·∫ßu th√™m c√°c bookmark y√™u th√≠ch v√†o nh√©!\n\n"
                + "üìÅ Bookmark Manager Team";
        this.sendSimpleEmail(user.getEmail(), subject, body);

        return CollectionResponse.fromEntity(collection);
    }
}
